(function() {
  var XMLGenerator, generator;

  XMLGenerator = (function() {
    class XMLGenerator {
      constructor(context) {
        var date;
        this.addEventListeners = this.addEventListeners.bind(this);
        this.addHelperText = this.addHelperText.bind(this);
        this.removeHelperText = this.removeHelperText.bind(this);
        this.resize = this.resize.bind(this);
        this.selectText = this.selectText.bind(this);
        this.onResize = this.onResize.bind(this);
        this.onSelectCodeClick = this.onSelectCodeClick.bind(this);
        this.onAddItemClick = this.onAddItemClick.bind(this);
        this.onRemoveItemClick = this.onRemoveItemClick.bind(this);
        this.onAddToExistingChange = this.onAddToExistingChange.bind(this);
        this.onKeyUp = this.onKeyUp.bind(this);
        this.getData = this.getData.bind(this);
        this.outputData = this.outputData.bind(this);
        this.umlauts = this.umlauts.bind(this);
        this.htmlEncode = this.htmlEncode.bind(this);
        this.context = context;
        this.data = {};
        this.$document = $(document);
        this.$channelTemplate = $("#channel-info-template");
        this.$channelInfo = this.context.find(".channel-info");
        this.$fields = this.context.find("input, textarea, select");
        this.$select = this.context.find("select");
        this.$output = this.context.find("#output");
        this.$headerHelperOutput = this.context.find(".header-helper-output");
        this.$addToExisting = this.context.find("#add-to-existing");
        this.$itemsWrapper = this.context.find(".item-wrapper");
        this.$items = this.context.find(".item");
        this.$addItem = this.context.find("#add-item");
        this.$selectCode = this.context.find("#select-code");
        this.$removeItem = this.context.find(".remove-item");
        this.$pubDate = this.context.find(".item-pub-date");
        date = new Date();
        this.$pubDate.val(new Date(date.getTime()));
        this.resize();
        this.addEventListeners();
        return;
      }

      addEventListeners() {
        this.$addItem.on("click", this.onAddItemClick);
        this.$selectCode.on("click", this.onSelectCodeClick);
        this.$document.on("click", this.$removeItem, this.onRemoveItemClick);
        this.$document.on("keyup", this.$fields, this.onKeyUp);
        this.$document.on("focus", "input, textarea, select", this.addHelperText);
        this.$document.on("blur", "input, textarea, select", this.removeHelperText);
        //@$fields.on "focus", @addHelperText
        this.$document.on("change", this.$select, this.onKeyUp);
        this.$addToExisting.on("change", this.onAddToExistingChange);
        $(window).on("resize", this.onResize);
      }

      addHelperText(event) {
        var $field, txt;
        $field = $(event.target);
        txt = $field.data("help-text");
        this.$headerHelperOutput.html(txt);
      }

      removeHelperText() {
        this.$headerHelperOutput.text("");
      }

      resize() {
        this.$output.css({
          height: $(window).height() - 130
        });
      }

      selectText(element) {
        var doc, range, selection, text;
        doc = this.$document.get(0);
        text = doc.getElementById(element);
        if (doc.body.createTextRange) {
          range = doc.body.createTextRange();
          range.moveToElementText(text);
          range.select();
        } else if (window.getSelection) {
          selection = window.getSelection();
          range = doc.createRange();
          range.selectNodeContents(text);
          selection.removeAllRanges();
          selection.addRange(range);
        }
      }

      onResize(event) {
        this.resize();
      }

      onSelectCodeClick(event) {
        this.selectText("output");
      }

      onAddItemClick(event) {
        var $newItem;
        $newItem = this.$items.eq(0).clone();
        this.$itemsWrapper.append($newItem);
      }

      onRemoveItemClick(event) {
        var $item, $target;
        $target = $(event.target);
        if ($target.hasClass("remove-item")) {
          $item = $target.closest(".item");
          $item.fadeOut("slow", () => {
            return $item.remove();
          });
        }
      }

      onAddToExistingChange(event) {
        if (this.$addToExisting.is(":checked")) {
          this.addToExisting = true;
          this.$channelInfo.addClass("hide");
        } else {
          this.addToExisting = false;
          this.$channelInfo.removeClass("hide");
        }
      }

      onKeyUp(event) {
        this.getData(event);
        this.outputData();
      }

      getData(event) {
        var $field, $input, $item, arr, i, inputName, item, j, k, len, name, obj, ref, ref1, val;
        $field = $(event.target);
        val = $field.val();
        name = $field.attr("name");
        this.data[name] = val;
        arr = [];
        ref = $(".item");
        for (j = 0, len = ref.length; j < len; j++) {
          item = ref[j];
          $item = $(item);
          obj = {};
          $input = $item.find(":input").not("button");
          for (i = k = 0, ref1 = $input.length; k <= ref1; i = k += 1) {
            $field = $($input[i]);
            inputName = $field.attr("name");
            obj[inputName] = $field.val();
          }
          arr.push(obj);
        }
        this.data["items"] = arr;
      }

      outputData() {
        var source, styledString, template, umlautsString, xmlString;
        source = this.$channelTemplate.html();
        template = Handlebars.compile(source);
        umlautsString = this.umlauts(template(this.data));
        xmlString = this.htmlEncode(umlautsString);
        styledString = xmlString.replace(new RegExp("&lt;", 'g'), "<span class='node'>&lt;").replace(new RegExp("&gt;", 'g'), "&gt;</span>");
        this.$output.html(styledString);
      }

      umlauts(str) {
        str = str.replace(new RegExp("å", 'g'), "&aring;").replace(new RegExp("ä", 'g'), "&auml;").replace(new RegExp("ö", 'g'), "&ouml;").replace(new RegExp("Å", 'g'), "&Aring").replace(new RegExp("Ä", 'g'), "&Auml;").replace(new RegExp("Ö", 'g'), "&Ouml;");
        return str;
      }

      htmlEncode(htmlString) {
        return $('<div/>').text(htmlString).html();
      }

    };

    XMLGenerator.prototype.data = null;

    XMLGenerator.prototype.addToExisting = false;

    XMLGenerator.prototype.$document = null;

    XMLGenerator.prototype.$fields = null;

    XMLGenerator.prototype.$select = null;

    XMLGenerator.prototype.$channelTemplate = null;

    XMLGenerator.prototype.$itemTemplate = null;

    XMLGenerator.prototype.$channelInfo = null;

    XMLGenerator.prototype.$headerHelperOutput = null;

    XMLGenerator.prototype.$output = null;

    XMLGenerator.prototype.$addToExisting = null;

    XMLGenerator.prototype.$itemsWrapper = null;

    XMLGenerator.prototype.$items = null;

    XMLGenerator.prototype.$addItem = null;

    XMLGenerator.prototype.$removeItem = null;

    XMLGenerator.prototype.$pubDate = null;

    return XMLGenerator;

  }).call(this);

  generator = new XMLGenerator($(".wrapper"));

}).call(this);

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=coffeescript